# Name of this simulation
name: "Example simulation"

# Description of this simulation
description: "Example description"

# Prefix of output file(s) path. For binary format, a single file <output-prefix>.bin will be written.
# When using PDB, three files will be generated:
#   * <output-prefix>.pdb - main PDB output file. It will contain frames with all the atoms except the lamins.
#   * <output-prefix>-lamin.pdb - file containing one frame with the lamins
#   * <output-prefix>.meta - PDB metadata
output-prefix: example-out

# The number of simulation steps, i. e. how many atom moves will be attempted.
steps: 10000

# Whether to write intermediate simulation steps to the main PDB file. If True every accepted move will
# generate a frame in the PDB file. If False only the last frame will be written.
write-intermediate-frames: True

# Whether to print the log to the standard output after every accepted frame: the current step,
# accepted frame number, score and callback results.
enable-logging: True

# Whether to print callback names in the log (prints only the results if False).
verbose-callbacks: True

# Generates different ("simple") mapping for energy vectors and binder types.
# The mapping won't be a bijection if used with 3 or more binder types. Not recommended.
simple-pdb-output: False

# Use binary output format.
binary-output: True

# In binary output format, how many delta frames should be between full keyframes
frames-per-keyframe: 1000

# A list of enabled callback names.
# Builtin callback names: "Standard Score", "Gyration Radius" (without quotes).
enabled-callbacks:
    - Standard Score

# The used internal representation.
# representation: IOChain

# The used score function.
# score: StandardScore

# Square of the maximum move radius. Only 2 is allowed when using IOChain or PureChain representations.
# Warning: possible integer overflows when using large move radii. Preferably use <= 27.
# max-move-radius: 2

# Square of the maximum chain segment length. Only 2 is allowed when using IOChain or PureChain.
# Warning: possible integer overflows when using large lengths. Preferably use <= 27.
# max-chain-segment-length: 2

# A predicate determining whether a bead should be frozen or not.
# Grammar:
#
#   expr ::= literal | literal,expr
#   literal ::= term | !literal
#   term ::= (expr) | rangeOrWildcard | rangeOrWildcard:rangeOrWildcard
#   rangeOrWildcard = * | integer | integer-integer
#
# "!" denotes negation, "," denotes alternative, "*" matches everything.
#
# Examples:
#
#   - "2:1-100,9" freezes beads from 1 to 100 on the chain 2, and also the whole chain 9
#   - "*:0" freezes the 0th bead of every chain
#   - "!(4,5)" freezes everything except for chains 4 and 5
# freeze-predicate: "1:1-100,2:*"

# Description for random initial state generation. Comment out this section if you want
# to load the initial state from PDB files.
generate:
    # The description of different chain features, each feature corresponding to a BED file.
    bed-files:
        - feat0.bed
        - feat1.bed

    # Names and lengths of chromosomes. The numbers of the chromosomes are defined by
    # the order of this list.
    chromosome-infos:
      - {name: "chr1", length: 100}

    # Names of binder types in order that matches "bed-files" field. The first type
    # will always be called "Lamin" and this name should be ommited in this list.
    binder-types-names:
      - "RegularBinder"

    # Numbers of binders of each type excluding lamins. Each type corresponds to a BED file provided above
    # starting the second (if exists). The first file corresponds to the lamin type.
    binders-counts:
        - 1000

    # The radius of the cell in which the simulation takes place.
    cell-radius: 10

    # The resolution used to convert BED files to chains.
    resolution: 10

    # Used internally to limit the number of failed attempts when generating a random initial state.
    # Try a higher value if the initialisation fails too often.
    initialisation-attempts: 10000

# Configuration for loading the initial state (and optionally more frames) from an existing input file
# load:
#     # List of input files. When reading from the binary format, this has to be exactly one file.
#     # For PDB, multiple input files will be merged.
#     input-files:
#         - example/in.pdb
#         - example/in.pdb.lamin
#
#      # The ".meta" file. Used only for PDB.
#     meta-file: example/in.pdb.meta
#
#     # Whether the input is in the binary format
#     binary-input: false
#
#     # How many frames of the input should be skipped before reading the state
#     skip-frames: 0
#
#     # Move source. In order to perform a normal MCMC simulation starting from the state specified
#     # in above input files, use "generate". This will randomly generate moves as usual.
#     # The other option here is "input". In this case, no moves will be randomly generated.
#     # Instead the remainder (after skipping `skip-frames` frames) of the input file(s) will be read
#     # and those moves will be provided to the simulation engine. This allows format conversion
#     # and computing additional callbacks.
#     # The process ends after `steps` moves have been read or after reaching end of file, whichever
#     # is first.
#     move-source: "generate"
